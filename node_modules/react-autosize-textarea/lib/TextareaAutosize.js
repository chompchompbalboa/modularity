'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _autosize = require('autosize');

var _autosize2 = _interopRequireDefault(_autosize);

var _tcombReact = require('tcomb-react');

var UPDATE = 'autosize:update',
    DESTROY = 'autosize:destroy',
    RESIZED = 'autosize:resized';

var Props = {
  onResize: _tcombReact.t.maybe(_tcombReact.t.Function)
};

exports.Props = Props;
/** A light replacement for built-in textarea component
 * which automaticaly adjusts its height to match the content
 * @param onResize - called whenever the textarea resizes
 */

var TextareaAutosize = (function (_React$Component) {
  _inherits(TextareaAutosize, _React$Component);

  function TextareaAutosize() {
    var _this = this;

    _classCallCheck(this, _TextareaAutosize);

    _React$Component.apply(this, arguments);

    this.dispatchEvent = function (EVENT_TYPE, defer) {
      var event = document.createEvent('Event');
      event.initEvent(EVENT_TYPE, true, false);
      var dispatch = function dispatch() {
        return _this.textarea.dispatchEvent(event);
      };
      if (defer) {
        setTimeout(dispatch);
      } else {
        dispatch();
      }
    };

    this.getValue = function (_ref) {
      var valueLink = _ref.valueLink;
      var value = _ref.value;
      return valueLink ? valueLink.value : value;
    };
  }

  TextareaAutosize.prototype.componentDidMount = function componentDidMount() {
    _autosize2['default'](this.textarea);
    if (this.props.onResize) {
      this.textarea.addEventListener(RESIZED, this.props.onResize);
    }
  };

  TextareaAutosize.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onResize) {
      this.textarea.removeEventListener(RESIZED, this.props.onResize);
    }
    this.dispatchEvent(DESTROY);
  };

  TextareaAutosize.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props;
    var children = _props.children;
    var onResize = _props.onResize;

    var props = _objectWithoutProperties(_props, ['children', 'onResize']);

    // eslint-disable-line no-unused-vars
    return _react2['default'].createElement(
      'textarea',
      _extends({}, props, { ref: function (ref) {
          _this2.textarea = ref;
        } }),
      children
    );
  };

  TextareaAutosize.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.getValue(nextProps) !== this.getValue(this.props)) {
      this.dispatchEvent(UPDATE, true);
    }
  };

  _createClass(TextareaAutosize, null, [{
    key: 'defaultProps',
    value: {
      rows: 1
    },
    enumerable: true
  }]);

  var _TextareaAutosize = TextareaAutosize;
  TextareaAutosize = _tcombReact.props(Props, { strict: false })(TextareaAutosize) || TextareaAutosize;
  return TextareaAutosize;
})(_react2['default'].Component);

exports['default'] = TextareaAutosize;